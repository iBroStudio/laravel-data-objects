<?php

declare(strict_types=1);

use IBroStudio\DataObjects\Tests\Support\DTO\FakeDTO;
use IBroStudio\DataObjects\Tests\Support\Models\FakeDataOwner;
use IBroStudio\DataObjects\ValueObjects;

it('can cast model property with value object', function () {
    $model = FakeDataOwner::factory()->create();

    expect(
        $model->data_object
    )
        ->toBeInstanceOf(FakeDTO::class)
        ->and(
            $model->text_vo
        )
        ->toBeInstanceOf(ValueObjects\Text::class)
        ->and(
            $model->boolean_vo
        )
        ->toBeInstanceOf(ValueObjects\Boolean::class)
        ->and(
            $model->class_vo
        )
        ->toBeInstanceOf(ValueObjects\ClassString::class)
        ->and(
            $model->company_vo
        )
        ->toBeInstanceOf(ValueObjects\CompanyName::class)
        ->and(
            $model->domain_vo
        )
        ->toBeInstanceOf(ValueObjects\Domain::class)
        ->and(
            $model->email_vo
        )
        ->toBeInstanceOf(ValueObjects\Email::class)
        ->and(
            $model->encryptable_vo
        )
        ->toBeInstanceOf(ValueObjects\EncryptableText::class)
        ->and(
            $model->firstname_vo
        )
        ->toBeInstanceOf(ValueObjects\FirstName::class)
        ->and(
            $model->float_vo
        )
        ->toBeInstanceOf(ValueObjects\FloatValueObject::class)
        ->and(
            $model->fullname_vo
        )
        ->toBeInstanceOf(ValueObjects\FullName::class)
        ->and(
            $model->giturl_vo
        )
        ->toBeInstanceOf(ValueObjects\GitSshUrl::class)
        ->and(
            $model->password_vo
        )
        ->toBeInstanceOf(ValueObjects\HashedPassword::class)
        ->and(
            $model->integer_vo
        )
        ->toBeInstanceOf(ValueObjects\IntegerValueObject::class)
        ->and(
            $model->ip_vo
        )
        ->toBeInstanceOf(ValueObjects\IpAddress::class)
        ->and(
            $model->lastname_vo
        )
        ->toBeInstanceOf(ValueObjects\LastName::class)
        ->and(
            $model->name_vo
        )
        ->toBeInstanceOf(ValueObjects\Name::class)
        ->and(
            $model->phone_vo
        )
        ->toBeInstanceOf(ValueObjects\Phone::class)
        ->and(
            $model->version_vo
        )
        ->toBeInstanceOf(ValueObjects\SemanticVersion::class)
        ->and(
            $model->ssh_key_vo
        )
        ->toBeInstanceOf(ValueObjects\SshKey::class)
        ->and(
            $model->timecode_vo
        )
        ->toBeInstanceOf(ValueObjects\Timecode::class)
        ->and(
            $model->timeduration_vo
        )
        ->toBeInstanceOf(ValueObjects\TimeDuration::class)
        ->and(
            $model->url_vo
        )
        ->toBeInstanceOf(ValueObjects\Url::class)
        ->and(
            $model->uuid_vo
        )
        ->toBeInstanceOf(ValueObjects\Uuid::class)
        ->and(
            $model->vat_number_vo
        )
        ->toBeInstanceOf(ValueObjects\VatNumber::class)
        ->and(
            $model->basic_auth_vo
        )
        ->toBeInstanceOf(ValueObjects\Authentication\BasicAuthentication::class)
        ->and(
            $model->s3_auth_vo
        )
        ->toBeInstanceOf(ValueObjects\Authentication\S3Authentication::class)
        ->and(
            $model->ssh_auth_vo
        )
        ->toBeInstanceOf(ValueObjects\Authentication\SshAuthentication::class)
        ->and(
            $model->auth_vo
        )
        ->toBeInstanceOf(ValueObjects\Authentication\AuthenticationAbstract::class);
});
